#encoding: utf-8
from django.conf import settings
from reportlab.graphics.charts.legends import Legend
from reportlab.graphics.charts.piecharts import Pie
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, cm
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.styles import ParagraphStyle
from reportlab.platypus import BaseDocTemplate, Frame, PageTemplate, Paragraph

from reportlab.graphics.shapes  import Drawing, Line
from functools import partial 

from reportlab.lib.enums import TA_JUSTIFY, TA_CENTER




#Autogenerated by ReportLab guiedit do not edit
from reportlab.graphics.charts.piecharts import Pie
from reportlab.lib.colors import black, red, purple, green, maroon, brown, pink, white, HexColor
from reportlab.graphics.charts.legends import Legend
from reportlab.graphics.shapes import Drawing, _DrawingEditorMixin
from reportlab.lib.validators import Auto
from reportlab.lib.colors import HexColor, black

pdf_chart_colors = [
    colors.HexColor("#1abc9c"),
    colors.HexColor("#2ecc71"),
    colors.HexColor("#3498db"),
    colors.HexColor("#9b59b6"),
    colors.HexColor("#e74c3c"),
    colors.HexColor("#f1c40f")
]

def setItems(n, obj, attr, values):
    m = len(values)
    i = m // n
    for j in xrange(n):
        setattr(obj[j],attr,values[j*i % m])

class BreakdownPieDrawing(_DrawingEditorMixin,Drawing):
    def __init__(self,width=400,height=200, x=0, y=0, *args,**kw):
        apply(Drawing.__init__,(self,width,height)+args,kw)
        # adding a pie chart to the drawing
        self._add(self,Pie(),name='pie',validate=None,desc=None)
        self.pie.width                  = width
        self.pie.height                 = height
        self.pie.x                      = x
        self.pie.y                      = y
        self.pie.data = [8, 21, 32, 181, 9, 18]
        self.pie.labels = ['de 0 a 5 años', 'de 6 a 12 años', 'de 12 a 17 años', 'de 18 a 29 años', 'de 30 a 59 años', 'más de 60 años']
        self.pie.simpleLabels           = 1

        self.pie.slices.label_visible   = 0
        self.pie.slices.popout = 2
        self.pie.slices.fontColor       = None
        self.pie.slices.strokeColor     = white
        self.pie.slices.strokeWidth     = 1

        # adding legend
        self._add(self,Legend(),name='legend',validate=None,desc=None)
        self.legend.x               = self.pie.x+self.pie.width+2*cm
        self.legend.y               = self.pie.y+self.pie.height-3*cm
        self.legend.dx              = 8
        self.legend.dy              = 8
        self.legend.fontName        = 'Helvetica'
        self.legend.fontSize        = 10
        self.legend.boxAnchor       = 'w'
        self.legend.columnMaximum   = 10
        self.legend.strokeWidth     = 1
        self.legend.strokeColor     = white
        self.legend.deltax          = 75
        self.legend.deltay          = 10
        self.legend.autoXPadding    = 5
        self.legend.yGap            = 5
        self.legend.dxTextSpace     = 5
        self.legend.alignment       = 'right'
        self.legend.dividerLines    = 1|2|4
        self.legend.dividerOffsY    = 8
        self.legend.subCols.rpad    = 30
        n = len(self.pie.data)
        setItems(n,self.pie.slices,'fillColor',pdf_chart_colors)
        self.legend.colorNamePairs = [(self.pie.slices[i].fillColor, (self.pie.labels[i][0:20], '%d' % self.pie.data[i])) for i in xrange(n)]


class BreakdownPieDrawing2(_DrawingEditorMixin,Drawing):
    def __init__(self,width=400,height=200, x=0, y=0, *args,**kw):
        apply(Drawing.__init__,(self,width,height)+args,kw)
        # adding a pie chart to the drawing
        self._add(self,Pie(),name='pie',validate=None,desc=None)
        self.pie.width                  = width
        self.pie.height                 = height
        self.pie.x                      = x
        self.pie.y                      = y
        self.pie.data = [199, 0, 40, 30, 0]
        self.pie.labels = ['Mestizos', 'Indígenas', 'Campesinos', 'Discapacitados', 'Afrodescendientes']
        self.pie.simpleLabels           = 1

        self.pie.slices.label_visible   = 0
        self.pie.slices.popout = 2
        self.pie.slices.fontColor       = None
        self.pie.slices.strokeColor     = white
        self.pie.slices.strokeWidth     = 1

        # adding legend
        self._add(self,Legend(),name='legend',validate=None,desc=None)
        self.legend.x               = self.pie.x+self.pie.width+2*cm
        self.legend.y               = self.pie.y+self.pie.height-3*cm
        self.legend.dx              = 8
        self.legend.dy              = 8
        self.legend.fontName        = 'Helvetica'
        self.legend.fontSize        = 10
        self.legend.boxAnchor       = 'w'
        self.legend.columnMaximum   = 10
        self.legend.strokeWidth     = 1
        self.legend.strokeColor     = white
        self.legend.deltax          = 75
        self.legend.deltay          = 10
        self.legend.autoXPadding    = 5
        self.legend.yGap            = 5
        self.legend.dxTextSpace     = 5
        self.legend.alignment       = 'right'
        self.legend.dividerLines    = 1|2|4
        self.legend.dividerOffsY    = 8
        self.legend.subCols.rpad    = 30
        n = len(self.pie.data)
        setItems(n,self.pie.slices,'fillColor',pdf_chart_colors)
        self.legend.colorNamePairs = [(self.pie.slices[i].fillColor, (self.pie.labels[i][0:20], '%d' % self.pie.data[i])) for i in xrange(n)]



















styles = getSampleStyleSheet()
styleN = styles['Normal']


styleH = ParagraphStyle(
        'title',
        fontName='Helvetica-Bold',
        fontSize=12,
        leading=42,
        alignment=TA_CENTER,
    )

styleH2 = ParagraphStyle(
    'title',
    fontName='Helvetica-Bold',
    fontSize=10,
    leading=42,
    alignment=TA_CENTER,
)

styleH2E = ParagraphStyle(
    'title',
    fontName='Helvetica-Bold',
    fontSize=10,
    leading=12,
    alignment=TA_CENTER,
)


styleN.alignment = TA_JUSTIFY
styleH.alignment = TA_CENTER


def drawPie(canvas, doc,  data, categories, type):
    if type==2:
        d = BreakdownPieDrawing2(8 * cm, 8 * cm, doc.leftMargin + 2 * cm, doc.bottomMargin+2*cm)
        d.drawOn(canvas, 0, 0)
    else:
        d = BreakdownPieDrawing(8*cm, 8*cm, doc.leftMargin+2*cm, doc.height-10*cm)
        d.drawOn(canvas, 0, 0)



def header(canvas, doc, content):
    canvas.saveState()

    ultra_logo = settings.BASE_DIR + '/reports/logo.jpg'
    company_logo = settings.BASE_DIR + '/reports/company.jpg'

    canvas.drawImage(company_logo, doc.leftMargin, doc.height+1*cm, 4.128*cm, 1.199*cm,preserveAspectRatio=True)
    canvas.drawImage(ultra_logo, doc.width+doc.rightMargin-3.275*cm, doc.height+1.2*cm,  3.275*cm, 0.800*cm,preserveAspectRatio=True)

    main_title = Paragraph("INDEPORTES BOYACÁ ", styleH)
    main_title.wrapOn(canvas, doc.width-8.5*cm, 1*cm)
    main_title.drawOn(canvas, 6*cm, doc.height+doc.topMargin - 1.8*cm)

    main_title = Paragraph("SISTEMA ULTRA", styleH)
    main_title.wrapOn(canvas, doc.width - 8.5 * cm, 1 * cm)
    main_title.drawOn(canvas, 6 * cm, doc.height + doc.topMargin - 2.4 * cm)

    content.wrapOn(canvas, doc.width - 8.5 * cm, 1 * cm)
    content.drawOn(canvas, 6*cm, doc.height + doc.topMargin - 3*cm)

    d = Drawing(doc.width, 0)
    line = Line(0, 0, doc.width, 0)
    line.strokeWidth = 3
    d.add(line)
    d.wrapOn(canvas, doc.width, 1 * cm)
    d.drawOn(canvas, 1.5*cm, doc.height + doc.topMargin - 2.4 * cm)

    d = Drawing(doc.width, 0)
    line = Line(0, 0, doc.width, 0)
    line.strokeWidth = 1
    d.add(line)
    d.wrapOn(canvas, doc.width, 1 * cm)
    d.drawOn(canvas, 1.5*cm, doc.height + doc.topMargin - 2.6 * cm)


    drawPie(canvas, doc, None, None, 1)
    drawPie(canvas, doc, None, None, 2)


    canvas.restoreState()


doc = BaseDocTemplate('test.pdf', topMargin=2.5*cm, 
                                  leftMargin=1.5*cm,
                                  rightMargin=1.5*cm,
                                  bottomMargin=1.5*cm, 
                                  pagesize=letter)


frame = Frame(1.5*cm,doc.bottomMargin,doc.width,doc.height-doc.bottomMargin, topPadding=0.5*cm) #Frame(1.5*cm, 2*cm, doc.width, doc.height-2*cm, id='normal', showboundary)


header_content = Paragraph("REPORTE DE DEPORTISTAS POR LIGA", styleH2)
template = PageTemplate(id='test', frames=frame, onPage=partial(header, content=header_content))
doc.addPageTemplates([template])

text = []
for i in range(111):
    text.append(Paragraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis dapibus, sapien vel egestas interdum, ex mauris consequat sem, in suscipit orci mauris sed leo. Nunc nec ante vitae eros vehicula sodales ac eu felis. Proin elementum elit eget augue porta, ac scelerisque nibh aliquam. Etiam laoreet ultricies dui, vitae facilisis arcu maximus vel. Nam turpis urna, consequat at purus id, ultricies interdum sapien. Integer quis dui eget urna suscipit vehicula sed nec ipsum. Nullam venenatis feugiat velit vitae aliquam. Ut risus libero, commodo id leo sed, dictum fringilla elit. Phasellus volutpat, leo eget convallis vestibulum, magna dui luctus quam, vitae aliquam velit magna eu ante.", styleN))

doc.build(text)
